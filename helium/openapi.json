{
  "openapi": "3.0.1",
  "info": {
    "title": "Coinly API Reference",
    "description": "The Coinly API is organized around REST. This API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.",
    "contact": {
      "name": "GitHub",
      "url": "https://github.com/Sn0wye/coinly/issues"
    },
    "license": {
      "name": "GNU General Public License v3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0"
    },
    "version": "1.0.0"
  },
  "servers": [{ "url": "https://coinly.snowye.dev/" }],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "/auth/login",
        "description": "Login",
        "requestBody": {
          "description": "Login Request",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestError" }
              }
            }
          },
          "401": {
            "description": "Wrong email or password",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "500": {
            "description": "Failed to generate JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/auth/profile": {
      "get": {
        "tags": ["Auth"],
        "summary": "/auth/profile",
        "description": "Get user profile",
        "responses": {
          "200": {
            "description": "ProfileResponse",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProfileResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "500": {
            "description": "Failed to fetch user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "/auth/register",
        "description": "Register a new user",
        "requestBody": {
          "description": "Register Request",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RegisterResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestError" }
              }
            }
          },
          "422": {
            "description": "Email already taken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "500": {
            "description": "Failed to hash password OR Failed to marshal data OR Failed to generate JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "BadRequestError": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Something went wrong :(" },
          "status_code": { "type": "integer", "example": 400 }
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Internal server error :("
          },
          "status_code": { "type": "integer", "example": 500 }
        }
      },
      "LoginRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": { "type": "string", "example": "johndoe@example.com" },
          "password": { "type": "string", "example": "P@ssw0rd!" }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "ProfileResponse": {
        "type": "object",
        "properties": {
          "annual_income": { "type": "integer", "example": 100000 },
          "assets_value": { "type": "integer", "example": 200000 },
          "debt": { "type": "integer", "example": 50000 },
          "email": { "type": "string", "example": "johndoe@example.com" },
          "id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": { "type": "string", "example": "John Doe" },
          "username": { "type": "string", "example": "johndoe" }
        }
      },
      "RegisterRequest": {
        "required": [
          "annual_income",
          "assets_value",
          "debt",
          "email",
          "name",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "annual_income": {
            "minimum": 0,
            "type": "integer",
            "example": 100000
          },
          "assets_value": {
            "minimum": 0,
            "type": "integer",
            "example": 200000
          },
          "debt": { "minimum": 0, "type": "integer", "example": 50000 },
          "email": { "type": "string", "example": "johndoe@example.com" },
          "name": { "type": "string", "example": "John Doe" },
          "password": { "type": "string", "example": "P@ssw0rd!" },
          "username": { "type": "string", "example": "johndoe" }
        }
      },
      "RegisterResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Unauthorized :(" },
          "status_code": { "type": "integer", "example": 401 }
        }
      },
      "UnprocessableEntityError": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Unprocessable entity :(" },
          "status_code": { "type": "integer", "example": 422 }
        }
      }
    }
  },
  "x-original-swagger-version": "2.0"
}
