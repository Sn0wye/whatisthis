{
  "schemes": ["https"],
  "swagger": "2.0",
  "info": {
    "description": "The Coinly API is organized around REST. This API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.",
    "title": "Coinly API Reference",
    "contact": {
      "name": "GitHub",
      "url": "https://github.com/Sn0wye/coinly/issues"
    },
    "license": {
      "name": "GNU General Public License v3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0"
    },
    "version": "1.0.0"
  },
  "host": "coinly.snowye.dev",
  "basePath": "/",
  "paths": {
    "/auth/login": {
      "post": {
        "description": "Login",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Auth"],
        "summary": "/auth/login",
        "parameters": [
          {
            "description": "Login Request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "Invalid request body",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Wrong email or password",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "500": {
            "description": "Failed to generate JWT token",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/auth/profile": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get user profile",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Auth"],
        "summary": "/auth/profile",
        "responses": {
          "200": {
            "description": "ProfileResponse",
            "schema": {
              "$ref": "#/definitions/ProfileResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "500": {
            "description": "Failed to fetch user",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "description": "Register a new user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Auth"],
        "summary": "/auth/register",
        "parameters": [
          {
            "description": "Register Request",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "400": {
            "description": "Invalid request body",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "422": {
            "description": "Email already taken",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityError"
            }
          },
          "500": {
            "description": "Failed to hash password OR Failed to marshal data OR Failed to generate JWT token",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BadRequestError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Something went wrong :("
        },
        "status_code": {
          "type": "integer",
          "example": 400
        }
      }
    },
    "InternalServerError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Internal server error :("
        },
        "status_code": {
          "type": "integer",
          "example": 500
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "example": "johndoe@example.com"
        },
        "password": {
          "type": "string",
          "example": "P@ssw0rd!"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        }
      }
    },
    "ProfileResponse": {
      "type": "object",
      "properties": {
        "annual_income": {
          "type": "integer",
          "example": 100000
        },
        "assets_value": {
          "type": "integer",
          "example": 200000
        },
        "debt": {
          "type": "integer",
          "example": 50000
        },
        "email": {
          "type": "string",
          "example": "johndoe@example.com"
        },
        "id": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "username": {
          "type": "string",
          "example": "johndoe"
        }
      }
    },
    "RegisterRequest": {
      "type": "object",
      "required": [
        "annual_income",
        "assets_value",
        "debt",
        "email",
        "name",
        "password",
        "username"
      ],
      "properties": {
        "annual_income": {
          "type": "integer",
          "minimum": 0,
          "example": 100000
        },
        "assets_value": {
          "type": "integer",
          "minimum": 0,
          "example": 200000
        },
        "debt": {
          "type": "integer",
          "minimum": 0,
          "example": 50000
        },
        "email": {
          "type": "string",
          "example": "johndoe@example.com"
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "password": {
          "type": "string",
          "example": "P@ssw0rd!"
        },
        "username": {
          "type": "string",
          "example": "johndoe"
        }
      }
    },
    "RegisterResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        }
      }
    },
    "UnauthorizedError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Unauthorized :("
        },
        "status_code": {
          "type": "integer",
          "example": 401
        }
      }
    },
    "UnprocessableEntityError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Unprocessable entity :("
        },
        "status_code": {
          "type": "integer",
          "example": 422
        }
      }
    }
  }
}
